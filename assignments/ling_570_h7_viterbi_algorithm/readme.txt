Author: Ryan Timbrook 
UW Net ID: timbrr 
Project: Ling 570 HW 7
Date: Oct 15, 2018

##---- Q1 ----##
Write viterbi.sh
This  a python program that:
    -Implements the Viterbi algorithm.
    -
Format: command line: viterbi.sh input_hmm test_file output_file
 - 
Input File: HMM is a state-emission hmm - same format as HW6. The output is produced by the to-state
   -Format: Assume the input hmm does not contain any emission probabilities for empty string
            - output symbols are produced by the to-state
            - No smoothing of the HMM
            - *** if a line contains a probability not in the range 0 - 1, print out a wanring message to stderr
                ("warning: the prob is not in [0,1] range: $line", where $line is the line) and ignore those lines
Test File: each line is an observation (a sequence of output symbols) - POS tagging, an observation will be a sentence
    - the sentence may, or may not include special symbol(</s>) for EOS.
    - Do not do anything special for BOS and EOS.
Output File:
   -Format: "observ => state seq lgprob"
        -state seq is the best state sequence for the observation
        -lgprob is lg P(observ,state seq); lg(x) is base-10 log
            
From Command line, Ran as: 
    $ ./viterbi.sh hmm1 test.word sys1
    Metrics:
    	-Total Lines in HMM Data File:[515746
    	-Total Lines in Test Word File:[100]
    	-stateCnt:[2209], symbolCnt:[7906], initialsCnt:[1], transitionsCnt:[103823], emissionsCnt:[411908]
    	-Total processing time:30.4121143818
    
    $ ./viterbi.sh hmm2 test.word sys2
    Metrics:
    	-Total Lines in HMM Data File:[515746]
    	-Total Lines in Test Word File:[100]
    	-stateCnt:[2209], symbolCnt:[7906], initialsCnt:[1], transitionsCnt:[103823], emissionsCnt:[411908]
    	-Total processing time:30.5845510960
    
    $ ./viterbi.sh hmm3 test.word sys3
    Metrics:
    	-Total Lines in HMM Data File:[515746]
    	-Total Lines in Test Word File:[100]
    	-stateCnt:[2209], symbolCnt:[7906], initialsCnt:[1], transitionsCnt:[103823], emissionsCnt:[411908]
    	-Total processing time:30.4753966331
    	
    $ ./viterbi.sh hmm4 test.word sys4
    Metrics:
    	-Total Lines in HMM Data File:[515746]
    	-Total Lines in Test Word File:[100]
    	-stateCnt:[2209], symbolCnt:[7906], initialsCnt:[1], transitionsCnt:[103823], emissionsCnt:[411908]
    	-Total processing time:30.6553058624
    
    $ ./viterbi.sh hmm5 test.word sys5
    Metrics:
    	-Total Lines in HMM Data File:[515746]
    	-Total Lines in Test Word File:[100]
    	-stateCnt:[2209], symbolCnt:[7906], initialsCnt:[1], transitionsCnt:[103823], emissionsCnt:[411908]
    	-Total processing time:30.7855324745


##---- Q2 ----##
Write conv_format.sh
This is a python program that:
    -converts the format of the output file, sys, generated by executing the viterbi.sh script
    -
Format: command line: cat file1 | conv_format.sh > file2

Input File: read into the program via stdin, it's the file created by executing viterbi.sh
    -Format: "observ => state_sequence lgprob
Output File: writen as stdout#   
	-Format: "w1/t1 w2/t2 ... wn/tn"
  -ti is the second tag of the state that generates wi, states are represented as tag1_tag2
  
From Command line, Run as: 
    $ cat sys1 | ./conv_format.sh > sys1_res
    	Metrics:
    		-Total processing time:0.0203564167
    $ cat sys2 | ./conv_format.sh > sys2_res
    	Metrics:
    		-Total processing time:0.0095143318
    $ cat sys3 | ./conv_format.sh > sys3_res
    	Metrics:
    		-Total processing time:0.0196752548
    $ cat sys4 | ./conv_format.sh > sys4_res
    	Metrics:
    		-Total processing time:0.0095479488
    $ cat sys5 | ./conv_format.sh > sys5_res
    	Metrics:
    		-Total processing time:0.0206856728
    
    
-Run calc_tagging_accuracy.pl:
	-format: calc_tagging_accuracy.pl gold_standard sys_res > sys_res.acc
	-the gold standard for the file test.word is test.word_pos, and the sys_res is the file created by conv_format.sh
	
	
	-Fill out Table 1 for accuracy rating.
	-Run commands:
		Group 1:
			$ ./viterbi.sh hmm1 test.word sys1
			$ cat sys1 | ./conv_format.sh > sys1_res
			$ ./calc_tagging_accuracy.pl test.word_pos sys1_res > sys1_res.acc 2>&1
			
		Group 2:
			$ ./viterbi.sh hmm2 test.word sys2
			$ cat sys2 | ./conv_format.sh > sys2_res
			$ ./calc_tagging_accuracy.pl test.word_pos sys2_res > sys2_res.acc 2>&1
		
		
		Group 3:
			$ ./viterbi.sh hmm3 test.word sys3
			$ cat sys3 | ./conv_format.sh > sys3_res
			$ ./calc_tagging_accuracy.pl test.word_pos sys3_res > sys3_res.acc 2>&1
		
		
		Group 4:
			$ ./viterbi.sh hmm4 test.word sys4
			$ cat sys4 | ./conv_format.sh > sys4_res
			$ ./calc_tagging_accuracy.pl test.word_pos sys4_res > sys4_res.acc 2>&1
		
		
		Group 5:
			$ ./viterbi.sh hmm5 test.word sys5
			$ cat sys5 | ./conv_format.sh > sys5_res
			$ ./calc_tagging_accuracy.pl test.word_pos sys5_res > sys5_res.acc 2>&1
		
		
		
		Table 1: Tagging accuracy
		HMM model	| tagging accuracy
			hmm1	| 78.69%
			hmm2	| 84.48%
			hmm3	| 86.03%
			hmm4	| 85.87%
			hmm5	| 85.99%
		
		
		
		